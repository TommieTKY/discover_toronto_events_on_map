extends layout 

block main-content 
  div.text-center.d-flex.align-items-end.justify-content-center.column-gap-4.text-info-emphasis.mb-3
    div
      label.fs-5.form-label(for="startDate") Start Date:
      input#startDate.form-control(type="date")
    div
      label.fs-5.form-label(for="endDate") End Date:
      input#endDate.form-control(type="date")
    div
      button#filterButton.btn.btn-info Filter the date

  div.text-center.text-success.fs-4
    p Green markers indicate events happening in the upcoming week.

  div.px-5.mt-3
    div#map
  
  script(async defer src=`https://maps.googleapis.com/maps/api/js?key=${mapApiKey}&callback=initMap&v=weekly&solution_channel=GMP_CCS_placedetails_v2`)

  script.
    function initMap() {
      const map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 43.654296875, lng: -79.38316345214844 },
        zoom: 12,
      });

      const infowindow = new google.maps.InfoWindow();
      const now = new Date();
 
      const markersData = !{JSON.stringify(trendingEvents)}.map(e => ({
          eventName: e.calEvent.eventName,
          description: e.calEvent.description,
          startDate: new Date(e.calEvent.startDateTime),
          endDate: new Date(e.calEvent.endDateTime),
          location: e.calEvent.locations[0].locationName,
          address: e.calEvent.locations[0].address,
          position: {
            lat: parseFloat(e.calEvent.locations[0].coords.lat),
            lng: parseFloat(e.calEvent.locations[0].coords.lng)
          }
        }))
        .filter(e => e.endDate >= now);

      let userLocation = null;

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          userLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
          };
          map.setCenter(userLocation);
          new google.maps.Marker({
            map,
            position: userLocation,
            title: "You are here",
            icon: {
              url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png",
            },
          });
        })
      }

      let markers = [];

      function showMarkers(filteredData) {
        markers.forEach(m => m.setMap(null));
        markers = []; 

        filteredData.forEach((data) => {
          const today = new Date();
          const upcomingWeek = new Date(today);
          upcomingWeek.setDate(today.getDate() + 7);

          const eventStartDate = new Date(data.startDate);
          console.log(eventStartDate.toDateString())
          const markerIcon = eventStartDate.toLocaleString() <= upcomingWeek.toLocaleString()
            ? "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
            : "http://maps.google.com/mapfiles/ms/icons/red-dot.png";

          const marker = new google.maps.Marker({
            map,
            position: data.position,
            icon: markerIcon
          });

          google.maps.event.addListener(marker, "click", () => {
            const formattedStartDate = new Date(data.startDate).toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
            const formattedEndDate = new Date(data.endDate).toLocaleString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: 'numeric',
              minute: '2-digit',
              hour12: true
            });
            const content = `
              <div>
                <h2>${data.eventName}</h2>
                <p>${data.description}</p>
                <p><strong>Location:</strong> ${data.location}</p>
                <p><strong>Address:</strong> ${data.address}</p>
                <p><strong>Start:</strong> ${formattedStartDate}</p>
                <p><strong>End:</strong> ${formattedEndDate}</p>
                <p><a href="https://www.google.com/maps/dir/?api=1&destination=${data.position.lat},${data.position.lng}" target="_blank" class="btn btn-success mt-3">Get Directions</a></p>
              </div>
            `;
            infowindow.setContent(content);
            infowindow.open(map, marker);
          });
          markers.push(marker);
        });
      }
      
      showMarkers(markersData);

      document.getElementById("filterButton").addEventListener("click", () => {
        const startDate = new Date(document.getElementById("startDate").value);
        const endDate = new Date(document.getElementById("endDate").value);

        if (!startDate || !endDate) return;

        const filteredData = markersData.filter(e => {
          const eventStart = new Date(e.startDate);
          const eventEnd = new Date(e.endDate);
          return eventStart >= startDate && eventEnd <= endDate;
        });
        
        showMarkers(filteredData);
      });
    }

